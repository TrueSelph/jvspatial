# =============================================================================
# jvspatial Environment Configuration Template
# =============================================================================
# Copy this file to .env and customize the values for your environment
#
# Usage:
#   1. Copy: cp .env.example .env
#   2. Edit the .env file with your specific configuration
#   3. Load in your application: python-dotenv or similar
#
# =============================================================================

# -----------------------------------------------------------------------------
# DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# Choose the database backend for jvspatial persistence

# Database Type Selection
# Options: 'json', 'mongodb'
# Default: 'json' (if not specified)
JVSPATIAL_DB_TYPE=json

# -----------------------------------------------------------------------------
# JSON DATABASE CONFIGURATION
# -----------------------------------------------------------------------------
# Used when JVSPATIAL_DB_TYPE=json (default backend)

# Base path for JSON database files
# The library will create subdirectories for different collections
# Relative paths are relative to your application's working directory
# Examples:
#   - ./data/jvdb (relative path)
#   - /var/lib/jvspatial/db (absolute path)
#   - ~/jvspatial_data (home directory)
JVSPATIAL_JSONDB_PATH=./jvdb

# -----------------------------------------------------------------------------
# MONGODB CONFIGURATION
# -----------------------------------------------------------------------------
# Used when JVSPATIAL_DB_TYPE=mongodb

# MongoDB Connection URI
# Format: mongodb://[username:password@]host[:port][/database][?options]
# Examples:
#   - mongodb://localhost:27017 (local, no auth)
#   - mongodb://user:pass@localhost:27017 (local with auth)
#   - mongodb+srv://user:pass@cluster.mongodb.net/ (MongoDB Atlas)
#   - mongodb://mongo1,mongo2,mongo3:27017/?replicaSet=rs0 (replica set)
JVSPATIAL_MONGODB_URI=mongodb://localhost:27017

# MongoDB Database Name
# The database within MongoDB instance to use for jvspatial data
# Will be created automatically if it doesn't exist
JVSPATIAL_MONGODB_DB_NAME=jvspatial_db

# -----------------------------------------------------------------------------
# ENVIRONMENT-SPECIFIC EXAMPLES
# -----------------------------------------------------------------------------

# DEVELOPMENT ENVIRONMENT
# Uncomment and modify for development setup:
# JVSPATIAL_DB_TYPE=json
# JVSPATIAL_JSONDB_PATH=./jvdb/dev

# TESTING ENVIRONMENT
# Uncomment and modify for testing setup:
# JVSPATIAL_DB_TYPE=json
# JVSPATIAL_JSONDB_PATH=./jvdb/test

# PRODUCTION ENVIRONMENT (MongoDB)
# Uncomment and modify for production setup:
# JVSPATIAL_DB_TYPE=mongodb
# JVSPATIAL_MONGODB_URI=mongodb+srv://production_user:secure_password@production-cluster.mongodb.net/
# JVSPATIAL_MONGODB_DB_NAME=jvspatial_production

# DOCKER ENVIRONMENT
# Uncomment and modify for Docker/containerized setup:
# JVSPATIAL_DB_TYPE=mongodb
# JVSPATIAL_MONGODB_URI=mongodb://mongo_container:27017
# JVSPATIAL_MONGODB_DB_NAME=jvspatial_docker

# -----------------------------------------------------------------------------
# WALKER INFINITE WALK PROTECTION
# -----------------------------------------------------------------------------
# Configure protection mechanisms to prevent infinite loops and runaway traversals

# Enable/disable walker protection mechanisms
# Options: true, false
# Default: true
JVSPATIAL_WALKER_PROTECTION_ENABLED=true

# Maximum number of steps a walker can take before auto-halt
# Set to 0 to disable step limit (not recommended)
# Default: 10000
JVSPATIAL_WALKER_MAX_STEPS=10000

# Maximum times a single node can be visited before auto-halt
# Prevents excessive cycles and infinite loops
# Default: 100
JVSPATIAL_WALKER_MAX_VISITS_PER_NODE=100

# Maximum execution time in seconds before auto-halt
# Prevents indefinitely running walkers
# Default: 300.0 (5 minutes)
JVSPATIAL_WALKER_MAX_EXECUTION_TIME=300.0

# Maximum queue size before limiting new additions
# Prevents memory overflow from excessive queuing
# Default: 1000
JVSPATIAL_WALKER_MAX_QUEUE_SIZE=1000

# -----------------------------------------------------------------------------
# ENVIRONMENT-SPECIFIC PROTECTION EXAMPLES
# -----------------------------------------------------------------------------

# DEVELOPMENT ENVIRONMENT (More permissive)
# JVSPATIAL_WALKER_MAX_STEPS=50000
# JVSPATIAL_WALKER_MAX_VISITS_PER_NODE=200
# JVSPATIAL_WALKER_MAX_EXECUTION_TIME=600.0

# TESTING ENVIRONMENT (Stricter limits for faster test execution)
# JVSPATIAL_WALKER_MAX_STEPS=1000
# JVSPATIAL_WALKER_MAX_VISITS_PER_NODE=10
# JVSPATIAL_WALKER_MAX_EXECUTION_TIME=30.0

# PRODUCTION ENVIRONMENT (Balanced limits)
# JVSPATIAL_WALKER_MAX_STEPS=10000
# JVSPATIAL_WALKER_MAX_VISITS_PER_NODE=100
# JVSPATIAL_WALKER_MAX_EXECUTION_TIME=300.0

# -----------------------------------------------------------------------------
# WEBHOOK CONFIGURATION
# -----------------------------------------------------------------------------
# Configure webhook processing, security, and performance settings

# Global HMAC Secret for Webhook Verification
# Use a cryptographically secure secret (minimum 32 characters)
# Can be overridden per-endpoint in decorator parameters
# Example: openssl rand -hex 32
JVSPATIAL_WEBHOOK_HMAC_SECRET=your-webhook-hmac-secret-replace-in-production

# HMAC Algorithm for Signature Verification
# Options: sha256, sha1, sha512
# Default: sha256 (recommended)
JVSPATIAL_WEBHOOK_HMAC_ALGORITHM=sha256

# Maximum Webhook Payload Size (bytes)
# Prevents memory exhaustion from large payloads
# Default: 1048576 (1MB)
JVSPATIAL_WEBHOOK_MAX_PAYLOAD_SIZE=1048576

# Webhook Idempotency TTL (seconds)
# How long to store idempotency keys for duplicate detection
# Default: 3600 (1 hour)
JVSPATIAL_WEBHOOK_IDEMPOTENCY_TTL=3600

# Require HTTPS for Webhook Endpoints
# Options: true, false
# Default: true (highly recommended for production)
JVSPATIAL_WEBHOOK_HTTPS_REQUIRED=true

# Service-Specific Webhook Secrets (Optional)
# These override the global HMAC secret for specific services
# JVSPATIAL_WEBHOOK_STRIPE_SECRET=whsec_your_stripe_webhook_secret
# JVSPATIAL_WEBHOOK_GITHUB_SECRET=your_github_webhook_secret
# JVSPATIAL_WEBHOOK_SLACK_SECRET=your_slack_webhook_secret

# -----------------------------------------------------------------------------
# AUTHENTICATION & JWT CONFIGURATION
# -----------------------------------------------------------------------------
# Configure user authentication, JWT tokens, and API security

# JWT Secret Key for Token Signing
# Use a cryptographically secure secret (minimum 32 characters)
# CRITICAL: Change this in production!
# Example: python -c "import secrets; print(secrets.token_urlsafe(32))"
JVSPATIAL_JWT_SECRET_KEY=your-jwt-secret-key-replace-in-production

# JWT Algorithm for Token Signing
# Options: HS256, HS384, HS512, RS256, etc.
# Default: HS256
JVSPATIAL_JWT_ALGORITHM=HS256

# JWT Token Expiration (hours)
# How long access tokens remain valid
# Default: 24 hours
JVSPATIAL_JWT_EXPIRATION_HOURS=24

# JWT Refresh Token Expiration (days)
# How long refresh tokens remain valid
# Default: 30 days
JVSPATIAL_JWT_REFRESH_EXPIRATION_DAYS=30

# API Key Configuration
# Header name for API key authentication
JVSPATIAL_API_KEY_HEADER=X-API-Key

# Query parameter name for API key authentication
JVSPATIAL_API_KEY_QUERY_PARAM=api_key

# Rate Limiting Configuration
# Enable/disable rate limiting
# Options: true, false
# Default: true
JVSPATIAL_RATE_LIMIT_ENABLED=true

# Default rate limit per hour for authenticated users
# Default: 1000 requests per hour
JVSPATIAL_DEFAULT_RATE_LIMIT_PER_HOUR=1000

# Security Configuration
# Require HTTPS for authentication endpoints
# Options: true, false
# Default: true (required for production)
JVSPATIAL_REQUIRE_HTTPS=true

# Session Cookie Security
# Make session cookies secure (HTTPS only)
# Options: true, false
# Default: true
JVSPATIAL_SESSION_COOKIE_SECURE=true

# Session Cookie HTTP Only
# Prevent JavaScript access to session cookies
# Options: true, false
# Default: true
JVSPATIAL_SESSION_COOKIE_HTTPONLY=true

# -----------------------------------------------------------------------------
# ENVIRONMENT-SPECIFIC WEBHOOK EXAMPLES
# -----------------------------------------------------------------------------

# DEVELOPMENT ENVIRONMENT (Relaxed security for testing)
# JVSPATIAL_WEBHOOK_HTTPS_REQUIRED=false
# JVSPATIAL_WEBHOOK_HMAC_SECRET=dev-webhook-secret-not-for-production
# JVSPATIAL_JWT_SECRET_KEY=dev-jwt-secret-not-for-production
# JVSPATIAL_REQUIRE_HTTPS=false
# JVSPATIAL_SESSION_COOKIE_SECURE=false

# TESTING ENVIRONMENT (Minimal security for fast tests)
# JVSPATIAL_WEBHOOK_HTTPS_REQUIRED=false
# JVSPATIAL_WEBHOOK_IDEMPOTENCY_TTL=60
# JVSPATIAL_JWT_EXPIRATION_HOURS=1
# JVSPATIAL_RATE_LIMIT_ENABLED=false

# PRODUCTION ENVIRONMENT (Maximum security)
# JVSPATIAL_WEBHOOK_HTTPS_REQUIRED=true
# JVSPATIAL_WEBHOOK_HMAC_SECRET=prod-webhook-secret-64-chars-minimum
# JVSPATIAL_JWT_SECRET_KEY=prod-jwt-secret-64-chars-minimum
# JVSPATIAL_REQUIRE_HTTPS=true
# JVSPATIAL_SESSION_COOKIE_SECURE=true
# JVSPATIAL_DEFAULT_RATE_LIMIT_PER_HOUR=500

# -----------------------------------------------------------------------------
# SECURITY NOTES
# -----------------------------------------------------------------------------
#
# 1. CRITICAL: Never commit .env files with real secrets to version control
# 2. Use cryptographically secure secrets (minimum 32 characters)
# 3. Rotate secrets regularly in production
# 4. Use strong passwords for MongoDB authentication
# 5. Restrict MongoDB network access in production
# 6. Use MongoDB Atlas or properly secured self-hosted instances
# 7. Consider using secrets management in production (AWS Secrets Manager, etc.)
# 8. Enable HTTPS in production for all authentication endpoints
# 9. Use secure session cookies in production
# 10. Monitor webhook endpoints for suspicious activity
#
# -----------------------------------------------------------------------------
