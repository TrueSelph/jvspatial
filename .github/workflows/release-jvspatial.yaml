name: Release Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  check-version:
    name: Check Package Version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous version from Git tags
        id: get_previous_version
        run: |
          git fetch --tags
          VERSION_TAG=$(git tag --list "v*" --sort=-v:refname | head -n 1 | sed 's/^v//')
          echo "previous_version=${VERSION_TAG:-0.0.0}" >> $GITHUB_ENV
          echo "Previous version: $VERSION_TAG"
          echo "previous_version=${VERSION_TAG:-0.0.0}" >> $GITHUB_OUTPUT

      - name: Get current version from __init__.py
        id: check
        run: |
          CURRENT_VERSION=$(grep -oP '__version__\s*=\s*"\K[^"]+' jvspatial/__init__.py)
          echo "Detected package version: $CURRENT_VERSION"
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" != "$previous_version" ]; then
            echo "version_changed=true" >> $GITHUB_ENV
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $VERSION_TAG to $CURRENT_VERSION"
          else
            echo "version_changed=false" >> $GITHUB_ENV
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Version did not change"
          fi

  publish:
    name: Publish Package & Create Release
    needs: check-version
    if: ${{ needs.check-version.outputs.version_changed == 'true' }}
    runs-on: ubuntu-latest
    environment: release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel twine

      - name: Build package
        run: python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload dist/*

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.check-version.outputs.new_version }} dist/* --title "Release v${{ needs.check-version.outputs.new_version }}" --notes "Automated release for version v${{ needs.check-version.outputs.new_version }}." --generate-notes
